:plugin: example
:type: output
:default_codec: plain
// Update header with plugin name and default codec

///////////////////////////////////////////
START - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////
:version: %VERSION%
:release_date: %RELEASE_DATE%
:changelog_url: %CHANGELOG_URL%
:include_path: ../../../../logstash/docs/include
///////////////////////////////////////////
END - GENERATED VARIABLES, DO NOT EDIT!
///////////////////////////////////////////

[id="plugins-{type}s-{plugin}"]

=== Vespa output plugin

include::{include_path}/plugin_header.asciidoc[]

==== Description

Writes documents to Vespa.

// Format anchors and links to support generated ids for versioning
// Sample anchor: [id="plugins-{type}s-{plugin}-setting_name"]
// Sample link: <<plugins-{type}s-{plugin}-setting_name>>

[id="plugins-{type}s-{plugin}-options"]
==== Vespa Output Configuration Options

[cols="<,<,<",options="header",]
|=======================================================================
|Setting |Input type|Required
| <<plugins-{type}s-{plugin}-vespa_url>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-client_cert>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-client_key>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-namespace>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-document_type>> |<<string,string>>|Yes
| <<plugins-{type}s-{plugin}-operation>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-create>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-id_field>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-remove_id>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-remove_namespace>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-remove_document_type>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-remove_operation>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-max_retries>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-max_connections>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-max_streams>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-operation_timeout>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-grace_period>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-doom_period>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-auth_token>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-enable_dlq>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-dlq_path>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-max_queue_size>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-max_segment_size>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-flush_interval>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-detect_schema>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-application_package_dir>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-deploy_package>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-idle_batches>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-config_server>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-generate_mtls_certificates>> |<<boolean,boolean>>|No
| <<plugins-{type}s-{plugin}-certificate_common_name>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-certificate_validity_days>> |<<number,number>>|No
| <<plugins-{type}s-{plugin}-type_mappings_file>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-type_conflict_resolution_file>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-vespa_cloud_tenant>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-vespa_cloud_application>> |<<string,string>>|No
| <<plugins-{type}s-{plugin}-vespa_cloud_instance>> |<<string,string>>|No
|=======================================================================

[id="plugins-{type}s-{plugin}-vespa_url"]
===== `vespa_url`

* Value type is <<string,string>>
* Default value is `http://localhost:8080`

URL to the Vespa instance.

If you're using Vespa Cloud, it will be listed as an MTLS endpoint under your application. In this case, make sure to set `client_cert` and `client_key` as well.

[id="plugins-{type}s-{plugin}-client_cert"]
===== `client_cert`

* Value type is <<string,string>>
* Default value is `nil`

Certificate to use for https://blog.vespa.ai/securing-vespa-with-mutually-authenticated-tls/[mTLS authentication]. It's the preferred method to https://cloud.vespa.ai/en/security/guide.html[authenticate with Vespa Cloud], too.

Make sure to set the `client_key` as well. The certificate should be in PEM format. Also, the `vespa_url` should be an HTTPS URL.

[id="plugins-{type}s-{plugin}-client_key"]
===== `client_key`

* Value type is <<string,string>>
* Default value is `nil`

Corresponding private key for the `client_cert` certificate. It must not be password-protected, otherwise Logstash will fail to start complaining `Could not find private key in PEM file`.

[id="plugins-{type}s-{plugin}-id_field"]
===== `id_field`

* Value type is <<string,string>>
* Default value is `id`

Field to get the document id from. If not present, a UUID will be generated

[id="plugins-{type}s-{plugin}-namespace"]
===== `namespace`

* Value type is <<string,string>>

Vespa namespace. A logical grouping of documents in Vespa.

Can be static or dynamic, i.e. you can use something like `%{foo}` to use the value in the `foo` field as the namespace. If the field is not present or returns null, the plugin will use the field name as is (here, `foo`).

[id="plugins-{type}s-{plugin}-document_type"]
===== `document_type`

* Value type is <<string,string>>

Document type. Physical separation of documents in different files underneath.

You should see it in the Vespa services.xml file as well as in the schema file.

Like `namespace`, this can be static or dynamic. So you can use `%{foo}` to use the value in the `foo` field as the document type. If the field is not present or returns null, the plugin will use the field name as is (here, `foo`).

[id="plugins-{type}s-{plugin}-operation"]
===== `operation`

* Value type is <<string,string>>

Operation to perform. Can be `put`, `update`, or `remove`. Dynamic values are supported (e.g. `%{foo}`). If not present, the plugin will use `put`.


[id="plugins-{type}s-{plugin}-remove_id"]
===== `remove_id`

* Value type is <<boolean,boolean>>
* Default value is `false`

If set to `true`, removes the ID field from the document after using it for document identification.

[id="plugins-{type}s-{plugin}-remove_namespace"]
===== `remove_namespace`

* Value type is <<boolean,boolean>>
* Default value is `false`

When using a dynamic namespace (e.g., `%{my_namespace}`), if set to `true`, removes the field containing the namespace value from the document after using it.

[id="plugins-{type}s-{plugin}-remove_document_type"]
===== `remove_document_type`

* Value type is <<boolean,boolean>>
* Default value is `false`

When using a dynamic document type (e.g., `%{my_doc_type}`), if set to `true`, removes the field containing the document type value from the document after using it.

[id="plugins-{type}s-{plugin}-remove_operation"]
===== `remove_operation`

* Value type is <<boolean,boolean>>
* Default value is `false`

When using a dynamic operation (e.g., `%{my_operation}`), if set to `true`, removes the field containing the operation value from the document after using it.

[id="plugins-{type}s-{plugin}-create"]
===== `create`

* Value type is <<boolean,boolean>>

If set to `true`, the plugin will add the `create=true` parameter to the request. It works for `put` and `update` operations, but mostly used for `update` as https://docs.vespa.ai/en/document-v1-api-guide.html#upserts[upserts].

[id="plugins-{type}s-{plugin}-max_retries"]
===== `max_retries`

* Value type is <<number,number>>
* Default value is `60`

On failure, retry this many times

[id="plugins-{type}s-{plugin}-max_connections"]
===== `max_connections`

* Value type is <<number,number>>
* Default value is `1`

How many HTTP/2 connections to keep open.

[id="plugins-{type}s-{plugin}-max_streams"]
===== `max_streams`

* Value type is <<number,number>>
* Default value is `128`

Number of streams per connection. This is the number of concurrent requests that can be made on a single connection.

[id="plugins-{type}s-{plugin}-operation_timeout"]
===== `operation_timeout`

* Value type is <<number,number>>
* Default value is `180`

Request timeout (in seconds) for each write operation.

[id="plugins-{type}s-{plugin}-grace_period"]
===== `grace_period`

* Value type is <<number,number>>
* Default value is `10`

After this time (seconds), the circuit breaker will be half-open:
it will ping the endpoint to see if it's back,
then resume sending requests when it's back.

[id="plugins-{type}s-{plugin}-doom_period"]
===== `doom_period`

* Value type is <<number,number>>
* Default value is `60`

After this time (seconds), if the connection is still broken, the connection will close
and stop sending requests until the Vespa service comes back up.

[id="plugins-{type}s-{plugin}-enable_dlq"]
===== `enable_dlq`

* Value type is <<boolean,boolean>>
* Default value is `false`

Enable Dead Letter Queue for this plugin. This overrides the global DLQ setting in logstash.yml.
In fact, values from logstash.yml are ignored, only those from the plugin configuration matter.

[id="plugins-{type}s-{plugin}-dlq_path"]
===== `dlq_path`

* Value type is <<string,string>>
* Default value is `"data/dead_letter_queue"`

Path to the Dead Letter Queue directory. The last part of the path will be the pipeline ID if you want to use the dead letter queue input plugin.

[id="plugins-{type}s-{plugin}-max_queue_size"]
===== `max_queue_size`

* Value type is <<number,number>>
* Default value is `1073741824` (1GB)

Maximum size of the Dead Letter Queue in bytes.

[id="plugins-{type}s-{plugin}-max_segment_size"]
===== `max_segment_size`

* Value type is <<number,number>>
* Default value is `10485760` (10MB)

Maximum size of each Dead Letter Queue segment file in bytes.

[id="plugins-{type}s-{plugin}-flush_interval"]
===== `flush_interval`

* Value type is <<number,number>>
* Default value is `5000`

How often to commit the Dead Letter Queue to disk, in milliseconds.

[id="plugins-{type}s-{plugin}-detect_schema"]
===== `detect_schema`

* Value type is <<boolean,boolean>>
* Default value is `false`

Enable detect schema mode. This will not send documents to Vespa, but will generate an application package
based on the incoming data. This is useful for quickly getting started with Vespa when you don't have
a schema yet.

[id="plugins-{type}s-{plugin}-application_package_dir"]
===== `application_package_dir`

* Value type is <<string,string>>
* Default value is `/tmp/vespa_app` (system temporary directory)

Directory where the generated application package will be stored. Only relevant if `detect_schema` is `true`.

[id="plugins-{type}s-{plugin}-deploy_package"]
===== `deploy_package`

* Value type is <<boolean,boolean>>
* Default value is `true`

Whether to deploy the generated application package. Only relevant if `detect_schema` is `true`.

[id="plugins-{type}s-{plugin}-idle_batches"]
===== `idle_batches`

* Value type is <<number,number>>
* Default value is `10`

Number of empty batches to wait before deploying the application package. Only relevant if `detect_schema` is `true`
and `deploy_package` is `true`.

[id="plugins-{type}s-{plugin}-config_server"]
===== `config_server`

* Value type is <<string,string>>
* Default value is `nil` (uses the host from `vespa_url`, if defined, with port 19071)

URL to the Vespa config server for deployment. Only relevant if `detect_schema` is `true` and `deploy_package` is `true`.

[id="plugins-{type}s-{plugin}-generate_mtls_certificates"]
===== `generate_mtls_certificates`

* Value type is <<boolean,boolean>>
* Default value is `false`

Whether to generate self-signed mTLS certificates for the application package. Only relevant if `detect_schema` is `true`.
Defaults to `true` if using Vespa Cloud, otherwise `false`.

[id="plugins-{type}s-{plugin}-certificate_common_name"]
===== `certificate_common_name`

* Value type is <<string,string>>
* Default value is `cloud.vespa.logstash`

Common name for the generated mTLS certificates. Only relevant if `detect_schema` is `true` and `generate_mtls_certificates` is `true`.

[id="plugins-{type}s-{plugin}-certificate_validity_days"]
===== `certificate_validity_days`

* Value type is <<number,number>>
* Default value is `30`

Validity period in days for the generated mTLS certificates. Only relevant if `detect_schema` is `true` and `generate_mtls_certificates` is `true`.

[id="plugins-{type}s-{plugin}-type_mappings_file"]
===== `type_mappings_file`

* Value type is <<string,string>>
* Default value is `nil`

Path to a YAML file containing custom type mappings for schema detection. Only relevant if `detect_schema` is `true`.

[id="plugins-{type}s-{plugin}-type_conflict_resolution_file"]
===== `type_conflict_resolution_file`

* Value type is <<string,string>>
* Default value is `nil`

Path to a YAML file containing custom type conflict resolution rules. Only relevant if `detect_schema` is `true`.

[id="plugins-{type}s-{plugin}-vespa_cloud_tenant"]
===== `vespa_cloud_tenant`

* Value type is <<string,string>>
* Default value is `nil`

Tenant name for Vespa Cloud deployment. Only relevant if `detect_schema` is `true` and deploying to Vespa Cloud.

[id="plugins-{type}s-{plugin}-vespa_cloud_application"]
===== `vespa_cloud_application`

* Value type is <<string,string>>
* Default value is `nil`

Application name for Vespa Cloud deployment. Only relevant if `detect_schema` is `true` and deploying to Vespa Cloud.

[id="plugins-{type}s-{plugin}-vespa_cloud_instance"]
===== `vespa_cloud_instance`

* Value type is <<string,string>>
* Default value is `default`

Instance name for Vespa Cloud deployment. Only relevant if `detect_schema` is `true` and deploying to Vespa Cloud.

[id="plugins-{type}s-{plugin}-auth_token"]
===== `auth_token`

* Value type is <<string,string>>
* Default value is `nil`

Authentication token for Vespa Cloud. If provided, it will be sent as a Bearer token in the Authorization header.

Note: This is mutually exclusive with client certificate authentication (`client_cert` and `client_key`). If both are provided, the client certificate will be used.

// The full list of Value Types is here: 
// https://www.elastic.co/guide/en/logstash/current/configuration-file-structure.html

[id="plugins-{type}s-{plugin}-common-options"]
include::{include_path}/{type}.asciidoc[]

:default_codec!:
